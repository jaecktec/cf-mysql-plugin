// Code generated by counterfeiter. DO NOT EDIT.
package cfpsqlfakes

import (
	"sync"

	"github.com/jaecktec/cf-psql-plugin/cfpsql"
)

type FakePsqlRunner struct {
	RunPsqlStub        func(hostname string, port int, dbName string, username string, password string, args ...string) error
	runPsqlMutex       sync.RWMutex
	runPsqlArgsForCall []struct {
		hostname string
		port     int
		dbName   string
		username string
		password string
		args     []string
	}
	runPsqlReturns struct {
		result1 error
	}
	runPsqlReturnsOnCall map[int]struct {
		result1 error
	}
	RunPsqlDumpStub        func(hostname string, port int, dbName string, username string, password string, args ...string) error
	runPsqlDumpMutex       sync.RWMutex
	runPsqlDumpArgsForCall []struct {
		hostname string
		port     int
		dbName   string
		username string
		password string
		args     []string
	}
	runPsqlDumpReturns struct {
		result1 error
	}
	runPsqlDumpReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePsqlRunner) RunPsql(hostname string, port int, dbName string, username string, password string, args ...string) error {
	fake.runPsqlMutex.Lock()
	ret, specificReturn := fake.runPsqlReturnsOnCall[len(fake.runPsqlArgsForCall)]
	fake.runPsqlArgsForCall = append(fake.runPsqlArgsForCall, struct {
		hostname string
		port     int
		dbName   string
		username string
		password string
		args     []string
	}{hostname, port, dbName, username, password, args})
	fake.recordInvocation("RunPsql", []interface{}{hostname, port, dbName, username, password, args})
	fake.runPsqlMutex.Unlock()
	if fake.RunPsqlStub != nil {
		return fake.RunPsqlStub(hostname, port, dbName, username, password, args...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runPsqlReturns.result1
}

func (fake *FakePsqlRunner) RunPsqlCallCount() int {
	fake.runPsqlMutex.RLock()
	defer fake.runPsqlMutex.RUnlock()
	return len(fake.runPsqlArgsForCall)
}

func (fake *FakePsqlRunner) RunPsqlArgsForCall(i int) (string, int, string, string, string, []string) {
	fake.runPsqlMutex.RLock()
	defer fake.runPsqlMutex.RUnlock()
	return fake.runPsqlArgsForCall[i].hostname, fake.runPsqlArgsForCall[i].port, fake.runPsqlArgsForCall[i].dbName, fake.runPsqlArgsForCall[i].username, fake.runPsqlArgsForCall[i].password, fake.runPsqlArgsForCall[i].args
}

func (fake *FakePsqlRunner) RunPsqlReturns(result1 error) {
	fake.RunPsqlStub = nil
	fake.runPsqlReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePsqlRunner) RunPsqlReturnsOnCall(i int, result1 error) {
	fake.RunPsqlStub = nil
	if fake.runPsqlReturnsOnCall == nil {
		fake.runPsqlReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runPsqlReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePsqlRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runPsqlMutex.RLock()
	defer fake.runPsqlMutex.RUnlock()
	fake.runPsqlDumpMutex.RLock()
	defer fake.runPsqlDumpMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePsqlRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfpsql.PsqlRunner = new(FakePsqlRunner)
